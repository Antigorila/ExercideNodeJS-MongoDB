Létrehozás új projekt:
    - Először hozz létre egy új mappát a htdocs mappában
    - Miután megnyitottad a projektet, írd be ezt a terminálba:
        - npm init -y
    - Ezután töltsd le a csomagokat (Ez létrehoz egy node_modules könyvtárat és feltölti a csomagokkal):
        - Express: npm install express
        - Pug: npm install pug
        - MongoDB: npm install mongoose
        - Bootstrap: npm install bootstrap
        - Nodemon: npm install -g nodemon
    - Most hozz létre egy index.js fájlt, és kövesd ezt a mappastruktúrát:
        myproject/
        ├── node_modules/
        ├── public/
        │   ├── css/
        │   │   └── styles.css
        │   ├── js/
        │   │   └── scripts.js
        │   ├── view/
        │   │   └── index.pug
        ├── index.js
        ├── package-lock.json
        ├── package.json

MongoDB indítása:
    - Ha nincs C:\Program Files mappában egy MongoDB nevű mappa, akkor először manuálisan kell létrehoznod
    - Ha minden rendben van, indítsd el a MongoDB-t az alábbi parancs begépelésével a cmd-be:
        - "C:\Program Files\MongoDB\Server\7.0\bin\mongod.exe" --dbpath=C:\data\db
    - Ezután nyisd meg a MongoDB Compass-t, és kattints a Connect gombra

Szerver indítása:
    - Nyiss egy új cmd.exe-t a terminálban:
        - cmd.exe
    - Ezután (ha letöltötted a Nodemon-t), így indíthatod:
        - nodemon index.js

index.js beállítása:
    - Szükséges csomagok beállítása:
        - Alapértelmezett:
            const http = require('http');
            const os = require('os');
            const path = require('path');
            const fs = require('fs');

        - Pug:
            const pug = require('pug');

        - Express:
            const express = require("express");
            const app = express();
            const router = express.Router();

            app.set('view engine', 'pug');
            app.set('views', path.join(__dirname, 'public', '{ViewFolderName}'));
            app.use(express.static(path.join(__dirname ,"/node_modules/bootstrap/dist/css")));
            app.use(express.static("./node_modules/bootstrap/dist/js"));
            app.use(express.static("./public/js/"));
            app.use(express.static("./public/css/"));

        - BodyParser: 
            const bodyParser = require('body-parser');
            app.use(bodyParser.urlencoded({ extended: true }));

        - MongoDB:
            const {MongoClient} = require("mongodb"); //IDE SZÜKSÉGES: {MongoClient}
            const { log } = require('console'); //IDE SZÜKSÉGES: { log }
            const url = "mongodb://localhost:27017";
            const client = new MongoClient(url);
            global.dbName = "{DatabaseName}";

        - Ha használod a database.js-t, akkor:
            - Töltsd be a database.js-t:
                const db = require('./basicMongoFunctions');
            - Állítsd be a globális változókat:
                db.dbName = "{DatabaseName}";
                db.client = {Client};
    
    - Miután mindent betöltöttél, be kell állítanod ezt az alap async függvényt:
    FONTOS: az app.get("*") mindig a függvény végén legyen meghívva!
        async function Main() 
        {
            try
            {
                app.get("*", (req, res) => {
                    res.send("Page not found");
                });
                
                app.listen(3000, () => {
                    console.log("http://localhost:3000/");
                });
            }
            catch (ex)
            {
                console.log("--ERROR--")
                console.log(ex)
            }
        }

    - Ezután csak hívd meg a függvényt az oldal alján, és készen állsz:
        Main();  

Pug oldal kiterjesztése egy másikkal:
    Ha ugyanabban a könyvtárban vannak:
        - extends {PageName}.pug
    Ha egy könyvtárral kijjebb van:
        - extends ../{PageName}.pug

Adatbázis beállítása:
FONTOS: Miután létrehoztál egy adatbázist, nem fogod látni, amíg nincsenek táblák benne.
    - Először létre kell hoznod az adatbázist, erre a legjobb, ha írsz egy útvonalat hozzá, így:
        app.get("/create_database", (req, res) => {
            db.createDb();
            res.render('home');
        });

    - Ezután itt van, hogyan hozhatsz létre táblákat az adatbázisban:
        app.get("/fill_database", (req, res) => {
            db.createCollection("{TableName}");
        });

Egy tábla kezelése a mongodb-ben és a node.js-ben (a jobb példák érdekében Modelként hivatkozunk rá).
Könnyen kezelhető, ha létrehozol egy mappát a Model nevével, majd létrehozod az index.pug, show.pug, edit.pug, create.pug fájlokat
Index, itt kell felsorolnod az összes példányt a Modelből:
    app.get("/{ModelName}/index", async (req, res) => {
        const {Array} = await db.listAll("{TableName}");
        res.render('{FolderName}/index', { {Array}: {Array} });
    });

Show, itt csak egy példányt kell megjelenítened az id alapján:
    app.get("/{ModelName}/show/:id", async (req, res) => {
        const {Speciment} = await db.findOne("{TableName}", "id", Number.parseInt(req.params.id));
        res.render('{FolderName}/show', { {Speciment}: {Speciment} });
    });

Create, itt csak át kell irányítanod a felhasználót a létrehozási oldalra:
    app.get("/{ModelName}/create", (req, res) => {
        res.render('{FolderName}/create');
    });

Add(or Store), itt kell feltöltened az adatbázisba a létrehozott példányt, a szerkesztéshez szükséged lesz egy PRIMÁR KULCSra, ezért ez is szerepel:
    app.post('/{Model}/add', async (req, res) => {
        let _id = 1;
        let {Array} = await db.SortBy("{TableName}", "id", "DESC");
        if ({Array}.length > 0) 
        {
            _id = {Array}[0].id + 1;
        } 

        const { {Data1}, {Data2} } = req.body;
        const {NewSpeciment} = {
            id: _id,
            data1: {Data1},
            data2: {Data2}
        };
        await db.createDoc("{TableName}", {NewSpeciment});
        
        //Kérdezd le újra a példányokat a táblából
        {Array} = await db.listAll("{TableName}");
        return res.render('{FolderName}/index', { {Array}: {Array} });
    });

Edit, itt csak át kell irányítanod a felhasználót arra az oldalra, ahol szerkesztheti a példányt
    app.get("/{ModelName}/edit/:id", async (req, res) => {
        let {Speciment} = await db.findOne("{TableName}", "id", Number.parseInt(req.params.id));
        res.render('writers/edit', { {Speciment}: {Speciment} });
    });

Update, itt frissítened kell az adatokat az adatbázisban (vagyis töröld és hozz létre újra)
    app.post('/{ModelName}/update', async (req, res) => {
        const { id, {Data1}, {Data2} } = req.body;
    
        await db.deleteOne("{TableName}", "id", Number.parseInt(id));
        
        const {NewSpeciment} = {
            id: Number.parseInt(id),
            data1: {Data1},
            data2: {Data2},
        };
        await db.createDoc("{TableName}", {NewSpeciment});
        
        const {Array} = await db.listAll("{TableName}");
        return res.render('{FolderName}/index', { {NewSpeciment}: {NewSpeciment} });
    });

Törlés... nos, csak törölnöd kell a példányt:
    app.get("/{ModelName}/delete/:id", async (req, res) => {
        await db.deleteOne("{TableName}", "id", Number.parseInt(req.params.id));

        const {Array} = await db.listAll("{TableName}");
        res.render('{FolderName}/index', { {Array}: {Array} });


    });

Lehetséges hibák itt:
    - Nem töltődik be az oldal, amikor paraméterekkel nyitod meg, ennek oka, hogy helytelenül adod meg a paramétereket, így kell két vagy több paramétert megadni:
        - res.render('{FolderName}/{Page}', { {Data1}: {Data1}, {Data2}: {Data2} });
    - Ha már egy mappában vagy, akkor csak az oldalt kell hívnod, és nem kell újra hívnod a mappát
        - Például: Ha a writer/create oldalon vagy, és van ott egy gomb, ami írót hoz létre, akkor csak a create-et kell hívnod
    - Ha csak egy PENDING ígéretet kapsz, akkor egy aszinkron függvényt hívsz meg egy nem aszinkron függvényben
    - Ha hibát kapsz a frissítő oldalon, akkor elfelejtetted vagy megadni, vagy fogadni a hibát... bízz bennem
    - Ha nem tudsz kiválasztani egy példányt id alapján, akkor nem konvertálod az id-t, így kell kinéznie:
        - {Speciment}: await db.findOne("{Table}", "id", Number.parseInt({id}))
    - Ha az a sz@r nem hajlandó törlődni, akkor azért van, mert más típusú változót adsz meg, mint ami az adatbázisban van... bízz bennem... ez MongoDB

Frontend minden típushoz:
FONTOS: Ne merészeld elfelejteni a kiterjesztést és a block content-et
Index (Ezt használd a show-ra... ugyanaz, de each nélkül):
    each {Speciment} in {Array} 
        h5 #{{Data1}.{Property}}
        h5 #{book.writer_id.name}
        div.row
            div.col
                div.card.m-2
                    a.btn.btn-primary(href=`/{Model}/show/${Speciment.id}`) Show
            div.col
                div.card.m-2
                    a.btn.btn-warning(href=`/{Model}/edit/${Speciment.id}`) Edit
            div.col
                div.card.m-2
                    a.btn.btn-danger(href=`/{Model}/delete/${Speciment.id}`) Delete

Create
    form(method="POST", action="add")
        input(type="text", name="{PROPERTY NAME}", class="form-control" placeholder="{Amit akarsz...}" required)
        textarea(type="text", name="{PROPERTY NAME}", class="form-control" rows="2" required)
        input(type="number", name="{PROPERTY NAME}", class="form-control" placeholder="{Amit akarsz}" required)
        input(type="date", name="{PROPERTY NAME}", class="form-control" required) 
        //Ez csak akkor működik, ha az array-t paraméterként adod az oldalhoz
        select(class="form-control" name='{PROPERTY NAME}')
            each {Speciment} in {Array}
                option(value={Speciment.id}) #{ {Speciment.Property} }  //példa: option(value=writer.id) #{writer.name}
        button(type="submit" class="btn btn-dark") Create

Edit:
    form(method="POST", action="/{Model}/{Route}") //Néha meg kell adnod az egész útvonalat... néha nem, használd a működőt
        input(type="hidden" name="id" value={Speciment.id})
        input(type="text", name="{PROPERTY NAME}", class="form-control" value={Speciment.Property} required)
        textarea(name="{PROPERTY NAME}", class="form-control" rows="2")= {Speciment.Property}
        input(type="number", name="{PROPERTY NAME}", class="form-control" value={Speciment.Property} required) 
        input(type="date", name="{PROPERTY NAME}", class="form-control" value={Speciment.Property} required)
        //Ez csak akkor működik, ha az array-t paraméterként adod az oldalhoz
        select(class="form-control" name='{PROPERTY NAME}')
            each {Speciment} in {Array}
                if {Speciment.id} == {Speciment.foreginID}  //példa: if writer.id == book.writer.id
                    option(selected='true' value={Speciment.id})={Speciment.name}
                else
                    option(value={Speciment.id})={Speciment.name}
        button(type="submit" class="btn btn-dark") Update